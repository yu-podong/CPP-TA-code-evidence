#include <iostream>	//표준 입출력 클래수와 객체, 변수 등이 포함된 헤더 파일
#include <iomanip>	//스트림 조작자 함수 제공
using namespace std;	//std 네임스페이스에 있는 이름 접근하기 위해 사용

int main()
{
	/* 실습 code 1*/
	int M[3][3] = { {1,2,3}, {4,5,6}, {7,8,9} };	//2차원 배열
	int(*ptr)[3];	//int[3]을 가르키는 포인터 ptr -> 배열 포인터
	int *p;	//주소를 저장하는 포인터 p
	int **pt;	//주소를 가리키는 변수의 주소를 저장하는 이중포인터 pt

	//M의 값(= &M[0])을 ptr에 저장
	ptr = M;	
	cout << left;

	//M+1 == &M[0] + 12(4byte * 3) == &M[1]
	cout << "ptr + 1 : " << ptr + 1 << setw(15) << "   " << "M + 1 : " << M + 1 << endl;	
	//*(M+1) == &M[1]에 들어있는 값 == M[1] == &M[1][0]
	cout << "*(ptr + 1) : " << *(ptr + 1) << setw(15) << "   " << "ptr[1] : " << ptr[1] << setw(15) << "   " << "*(M + 1) : " << *(M + 1) << setw(15) << "   " << "M[1] : " << M[1] << endl;	
	//&M[1][0]에 들어있는 값 == M[1][0] == 4
	cout << "**(ptr + 1) : " << **(ptr + 1) << setw(15) << "   " << "**(M + 1) : " << **(M + 1) << setw(15) << "   " << "*M[1] : " << *M[1] << setw(15) << "   " << "M[1][0] : " << M[1][0] << endl << endl;	

	//M[0]의 값(= &M[0][0])을 p에 저장
	p = M[0];	
	//*M == *(&M[0]) == M[0] == &M[0][0]
	cout << "p : " << p << setw(15) << "   " << "M[0] : " << M[0] << setw(15) << "   " << "*M : " << *M << endl;	
	//*M + 1 == *(&M[0]) + 1 == M[0]+1 == &M[0][0] + 4(4byte) == &M[0][1]
	cout << "p + 1 : " << p + 1 << setw(15) << "   " << "M[0] + 1 : " << M[0] + 1 << setw(15) << "   " << "*M + 1 : " << *M + 1 << endl;	
	//*(*M + 1) == *(*(&M[0]) + 1) == *(M[0] + 1) == *(&M[0][0] + 1) == *(&M[0][1]) == M[0][1] == 2
	cout << "*(p + 1) : " << *(p + 1) << setw(15) << "   " << "*(M[0] + 1) : " << *(M[0] + 1) << setw(15) << "   " << "*(*M + 1) : " << *(*M + 1) << endl << endl;	

	//p의 주소를 pt에 저장
	pt = &p;	
	// *pt == (&p) == p == M[0] == &M[0][0]
	cout << "*pt : " << *pt << setw(15) << "   " << "p : " << p << endl;	
	//**pt == **(&p) == *(p) == *(M[0]) == *(&M[0][0]) == M[0][0] == 1
	cout << "**pt : " << **pt << setw(15) << "   " << "*p : " << *p << endl;	

	/* 실습 code 2
	int i1 = 10;
	int i2 = 20;
	const int* pInt1;	//pInt1가 가리키는 변수의 값을 변경못하는 포인터 pInt1 (pInt1이 가리키고 있는 변수에 const 속성 부여)
	int* const pInt2 = &i1;	//주소를 바꾸지 못하는 포인터 pInt2 (pInt2 자체에 const 속성 부여)
	const int* const p = &i2;	//p가 가리키는 변수의 값과 주소를 변경하지 못하는 포인터 p (p와 p가 가리키고 있는 변수 모두 const 속성 부여)

	//Case A
	pInt1 = &i1;	//i1의 주소를 pInt1에 대입 -> 가능
	*pInt1 = 30;	//i1의 값을 30으로 변경 -> 불가능

	//Case B
	pInt2 = &i2;	//i2의 주소를 pInt2에 대입 -> 불가능
	*pInt2 = 50;	//i2의 값을 50으로 변경 -> 가능

	//Case C
	p = &i1;	//i1의 주소를 p에 대입 -> 불가능
	*p = 40;	//i1의 값을 40으로 변겅 -> 불가능
	*/
	return 0;
}